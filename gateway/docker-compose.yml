---
version: '3'
services:
  # frontend:
  #   container_name: frontend
  #   image: frontend
  #   ports:
  #     - 3000:3000

  # T5-LARGE:
  #   image: t5-large
  #   container_name: t5-large
  #   environment:
  #     CONTEXT_SERVER_ADDRESS: "http://context:8090"
  #   ports:
  #     - '8081:8081'
  
  # T5-XL:
  #   image: t5-xl
  #   container_name: t5-xl
  #   environment:
  #     CONTEXT_SERVER_ADDRESS: "http://context:8090"
  #   ports:
  #     - '8082:8082'

  # GODEL-LARGE:
  #   image: godel-large
  #   container_name: godel-large
  #   environment:
  #     CONTEXT_SERVER_ADDRESS: "http://context:8090"
  #   ports:
  #     - '8083:8083'

  # gateway:
  #   image: gateway
  #   container_name: gateway
  #   environment:
  #     T5_ADDR: "http://T5-LARGE:8081"
  #     T5_XL_ADDR: "http://T5-XL:8082"
  #     GODEL_LARGE_ADDR: "http://GODEL-LARGE:8083"
  #   ports:
  #     - '8080:8080'

  # db:
  #   image: postgres:14.5
  #   container_name: db
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=secret123
  #     - POSTGRES_DB=acp_llm
  #     - POSTGRES_HOST=db
  #     - POSTGRES_PORT=5432
  #   ports:
  #     - '5432:5432'
  #   expose:
  #     - '5432'
  #   volumes:
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #     - ./data:/var/lib/postgresql/data
  
  # logger:
  #   image: logger
  #   container_name: logger
  #   restart: always
  #   depends_on:
  #     zookeeper:
  #       condition: service_started
  #     broker:
  #       condition: service_started
  #     db:
  #       condition: service_started
  #     redis:
  #       condition: service_started
  #   ports:
  #     - '8091:8091'
  #   environment:
  #     PG_USERNAME: "postgres"
  #     PG_PASSWORD: "secret123"

  # context:
  #   image: context
  #   container_name: context
  #   ports:
  #     - '8090:8090'

  redis:
    image: 'redis'
    container_name: redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    expose:
      - '6379'
    ports:
      - '6379:6379'

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    expose:
      - '29092'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic JOBS --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic TRANSCRIPTION_JOBS --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic EMBEDDING_JOBS --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "